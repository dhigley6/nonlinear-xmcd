"""Make quantitative plot for 2019 submission to Nat. Comm.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

import dummy_ax

import abs_get_processed_data
import als_process2019

# Spectral ranges of interest
FERMI_ENERGY = 777.5
HOLES_RANGE = (FERMI_ENERGY-2, FERMI_ENERGY)
ELECS_RANGE = (FERMI_ENERGY, FERMI_ENERGY+2)
ENERGIES_RANGE = (FERMI_ENERGY-2, FERMI_ENERGY+2)
XMCD_RANGE = (777.56, 778.77)
####

FWHM_FLUENCE2AVG_FLUENCE = 0.4412712003053032
FLUENCE2ABSORBEDENERGY = 17.3

ALS_SPEC = als_process2019.get_als_spectra()
INCIDENT_SPECS = abs_get_processed_data.get_incident_specs()
ABSORBED_SPECS = abs_get_processed_data.get_constant_absorbed_specs()

#### Calculate conversion factor of spectral intensity to holes
m_s = 1.96      # [\mu_B/atom], from Loic's sum rule analysis
l3_start = 764
l3_end = 790
l2_start = 790
l2_end = 810
l3_in_range = (ALS_SPEC['xmcd']['phot'] > l3_start) & (ALS_SPEC['xmcd']['phot'] < l3_end)
l2_in_range = (ALS_SPEC['xmcd']['phot'] > l2_start) & (ALS_SPEC['xmcd']['phot'] < l2_end)
l3_xmcd = np.trapz(ALS_SPEC['xmcd']['spec'][l3_in_range], x=ALS_SPEC['xmcd']['phot'][l3_in_range])
l2_xmcd = np.trapz(ALS_SPEC['xmcd']['spec'][l2_in_range], x=ALS_SPEC['xmcd']['phot'][l2_in_range])
C = (-1*l3_xmcd+2*l2_xmcd)/m_s
D = C/1.3
D = D*1.05
####

import set_plot_params
set_plot_params.init_paper_small()

def integrate_range(x, y, integration_range, steps=500):
    """Integrate data over specificed range
    """
    x_interped = np.linspace(integration_range[0], integration_range[1], steps)
    y_interped = np.interp(x_interped, x, y)
    integral = np.trapz(y_interped, x=x_interped)
    return integral

def get_quant_xas_xmcd():
    holes = []
    elecs = []
    energies = []
    err_energies = []
    xmcds = []
    err_xmcds = []
    fluences = []
    xmcd_norm = integrate_range(ALS_SPEC['xmcd']['phot'], ALS_SPEC['xmcd']['spec'], XMCD_RANGE)
    for spec in ABSORBED_SPECS:
        holes_per_ev = spec['xas']['diff']/D
        holes_curr = integrate_range(spec['xas']['phot'], holes_per_ev, HOLES_RANGE)
        elecs_curr = integrate_range(spec['xas']['phot'], holes_per_ev, ELECS_RANGE)
        energy_per_ev = (spec['xas']['diff']/D)*(FERMI_ENERGY-spec['xas']['phot'])
        energy_curr = integrate_range(spec['xas']['phot'], energy_per_ev, ENERGIES_RANGE)
        xmcd_curr = integrate_range(spec['xmcd']['phot'], spec['xmcd']['spec'], XMCD_RANGE)/xmcd_norm
        variance_energy_per_ev = ((spec['plus']['err']/2)**2+(spec['minus']['err']/2)**2)*(FERMI_ENERGY-spec['xas']['phot'])**2
        variance_energy_curr = integrate_range(spec['xas']['phot'], variance_energy_per_ev, ENERGIES_RANGE)
        variance_xmcd_per_ev = (spec['plus']['err']**2+spec['minus']['err']**2)/(xmcd_norm**2)
        variance_xmcd_curr = integrate_range(spec['xmcd']['phot'], variance_xmcd_per_ev, XMCD_RANGE)
        err_energy_curr = np.sqrt(variance_energy_curr)
        err_xmcd_curr = np.sqrt(variance_xmcd_curr)
        holes.append(holes_curr)
        elecs.append(elecs_curr)
        energies.append(energy_curr)
        err_energies.append(err_energy_curr)
        xmcds.append(xmcd_curr)
        err_xmcds.append(err_xmcd_curr)
        fluences.append(spec['absorbed_fluence2'])
    fluences = np.array(fluences)
    absorbed_energies = fluences*FLUENCE2ABSORBEDENERGY
    test = np.polyfit(absorbed_energies, np.array(energies)*1000, deg=1)
    xmcd_fit = np.polyfit(absorbed_energies, np.array(xmcds), deg=1)
    print xmcd_fit
    return {'holes': holes,
            'elecs': elecs,
            'spec_energies': np.array(energies)*1000,
            'err_energies': np.array(err_energies)*1000,
            'xmcds': xmcds,
            'err_xmcds': err_xmcds,
            'fluences': np.array(fluences),
            'absorbed_energies': fluences*FLUENCE2ABSORBEDENERGY,
            'energies_fit': test,
            'xmcds_fit': xmcd_fit}

def new_quant_figure():
    f, axs = plt.subplots(1, 2, sharex=True, figsize=(3.37, 2.4))
    quant = get_quant_xas_xmcd()
    dummy = np.array([0, 400])
    #axs[0].plot(dummy, dummy*0.5, linestyle=(0, (3, 1.5)), label=r'$y=x/2$', color='k')
    line_zero_offset = lambda x, slope: x*slope
    line_hundred_offset = lambda x, slope: x*slope+100
    slope, covar = curve_fit(line_zero_offset, quant['absorbed_energies'], quant['spec_energies'], p0=0.4)
    print covar
    print 'slope is '+str(slope)
    axs[0].errorbar(quant['absorbed_energies']/2, quant['spec_energies'], marker='o', label='Expt.', yerr=quant['err_energies'], xerr=0.2*quant['absorbed_energies']/2, linestyle='None', markerfacecolor='none', markeredgecolor='k', color='k', markeredgewidth=1, markersize=3, capsize=2)
    axs[0].plot(dummy/2, line_zero_offset(dummy, 0.79/2), label=r'Fit, $\tau_c = 17$ fs', linestyle=(0, (3, 1.5)), color='r')
    axs[0].legend(loc='upper left')
    axs[0].text(0.85, 0.15, 'A', fontsize=10, weight='bold', horizontalalignment='right', transform=axs[0].transAxes)
    axs[1].errorbar(quant['absorbed_energies']/2, np.array(quant['xmcds'])*100, marker='o', label='Expt.', yerr=np.array(quant['err_xmcds'])*100, xerr=0.2*quant['absorbed_energies']/2, linestyle='None', markerfacecolor='k', markeredgecolor='k', color='k', markeredgewidth=1, markersize=3, capsize=2)
    xmcd_slope, xmcd_covar = curve_fit(line_hundred_offset, quant['absorbed_energies'], np.array(quant['xmcds'])*100, p0=-1)
    print 'xmcd slope is '+str(xmcd_slope)
    #axs[1].plot(dummy/2, line_hundred_offset(dummy, xmcd_slope), label='Fit', linestyle=(0, (3, 1.5)), color='r')
    #axs[1].plot(quant['absorbed_energies'], np.array(quant['xmcds'])*100, color='k', marker='o', label='Expt')
    axs[1].text(0.35, 0.15, 'B', fontsize=10, weight='bold', horizontalalignment='right', transform=axs[1].transAxes)
    axs[1].legend(loc='upper right')
    axs[1].set_ylabel('Normalized XMCD (%)')
    axs[0].set_ylabel('Co 3d Electron Energy\n(meV/atom)')
    big_ax = dummy_ax.make_big_dummy_ax(f)
    big_ax.set_xlabel('Pulse Averaged Absorbed\nX-Ray Energy (meV/atom)')
    big_ax.xaxis.set_label_coords(0.5, -0.2)
    big_ax.set_yticks([])
    big_ax.set_xticks([0])
    big_ax.set_xticklabels([' '])
    axs[0].set_xticks([0, 50, 100, 150])
    axs[1].set_xticks([0, 50, 100, 150])
    axs[0].set_xlim([-5, 175])
    axs[0].set_ylim([-25, 175])
    #axs[1].set_ylim([74, 103])
    plt.tight_layout(pad=0.2, w_pad=2.3, h_pad=0)
    #plt.savefig('../plots/2018_09_28_quant.eps', dpi=600)
    #plt.savefig('../plots/2018_09_28_quant.png', dpi=600)
    print quant['absorbed_energies']
    print quant['xmcds']
